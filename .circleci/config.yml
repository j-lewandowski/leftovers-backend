version: 2.1

orbs:
  node: circleci/node@5.2

executors:
  node-executor:
    docker:
      - image: cimg/node:22.11.0

aliases:
  - &prepare_test_envs
    run:
      name: Prepare test environmental variables
      command: |
        # 1. Replace lines starting with comments with empty line
        # 2. Remove all empty lines
        # 3. Add `export ` to beginning of each line
        sed \
          -e 's/\s*#.*$//' \
          -e '/^\s*$/d' \
          -e 's/^/export /g' \
          .env.test >> $BASH_ENV
  - &restore_cache
    restore_cache:
      keys:
        - v{{ .Environment.CACHE_VERSION }}-dependencies-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "package.json" }}
        - v{{ .Environment.CACHE_VERSION }}-dependencies-{{ .Environment.CIRCLE_BRANCH }}
        - v{{ .Environment.CACHE_VERSION }}-dependencies
  - &save_cache
    save_cache:
      paths:
        - node_modules
      key: v{{ .Environment.CACHE_VERSION }}-dependencies-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "package.json" }}

commands: 
     setup-buildx:
      steps:
        - run:
            name: Setup buildx and qemu
            command: |
              sudo apt-get update
              sudo apt-get install -y qemu-user-static binfmt-support
        - run:
            name: Check versions
            command: |
              qemu-aarch64-static --version
              update-binfmts --version 
        - run:
            name: Create builder
            command: |
              docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
              docker run --privileged --rm tonistiigi/binfmt --install arm64
              docker buildx create --name multiarch-builder
              docker buildx use multiarch-builder
              docker buildx inspect --bootstrap

jobs:
  fetch-latest-changes:
    resource_class: small
    executor: node-executor
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
            - dist

  install-dependencies:
    resource_class: small
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - *restore_cache
      - node/install-packages
      - *save_cache

  lint:
    resource_class: small
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - *restore_cache
      - run:
          name: Run lint checks
          command: npm run lint

  unit-tests:
    resource_class: medium
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - *restore_cache
      - run:
          name: Run unit tests
          command: npm run test

  e2e-tests:
    resource_class: small
    docker:
      - image: cimg/node:20.18
      - image: cimg/postgres:17.0
        environment:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
    steps:
      - attach_workspace:
          at: ~/project
      - *restore_cache
      - *prepare_test_envs
      - run:
          name: Prepare .env file
          command: sh ./scripts/env_file_from_env_vars.sh
      - run:
          name: Migrate database
          command: npm run test:db:migrate
      - run:
          name: Run e2e tests
          command: npm run test:e2e

  build:
    resource_class: small
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - *restore_cache
      - run:
          name: Build project
          command: npm run build

  deploy:
    resource_class: medium
    docker:
      - image: cimg/base:2024.11
    steps:
      - attach_workspace:
          at: ~/project
      - *restore_cache
      - setup_remote_docker
      - run:
          name: Add SSH key to known hosts
          command: |
            ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Prepare .env file
          command: sh ./scripts/env_file_from_env_vars.sh
      - setup-buildx
      - run:
          name: Build docker image
          command: |
            docker buildx build --platform linux/arm64 -t leftovers-backend --load .
            docker images
      - run:
          name: Clean up old application data
          command: |
            ssh $SSH_USER@$SSH_HOST "
              rm -rf $APP_REMOTE_PATH;
              docker image prune -a -f || true;
              mkdir -p $APP_REMOTE_PATH;
            "

      - run:
          name: Upload new deployment files
          command: |
            scp docker-compose.prod.yml $SSH_USER@$SSH_HOST:$APP_REMOTE_PATH
            scp .env $SSH_USER@$SSH_HOST:$APP_REMOTE_PATH

      - run:
          name: Stop any running containers
          command: |
            ssh $SSH_USER@$SSH_HOST "
              docker compose -f $APP_REMOTE_PATH/docker-compose.prod.yml down || true;
            "

      - run:
          name: Send docker image over SCP
          command: |
            docker save -o leftovers-backend.tar leftovers-backend:latest
            gzip leftovers-backend.tar
            scp leftovers-backend.tar.gz $SSH_USER@$SSH_HOST:$APP_REMOTE_PATH
            ssh $SSH_USER@$SSH_HOST "gunzip $APP_REMOTE_PATH/leftovers-backend.tar.gz"

      - run:
          name: Load docker image and start containers
          command: |
            ssh $SSH_USER@$SSH_HOST "
              docker load -i $APP_REMOTE_PATH/leftovers-backend.tar;
              docker compose -f $APP_REMOTE_PATH/docker-compose.prod.yml up -d;
            "

workflows:
  version: 2
  build_and_test:
    jobs:
      - fetch-latest-changes
      - install-dependencies:
          requires:
            - fetch-latest-changes
      - lint:
          requires:
            - install-dependencies
      - unit-tests:
          requires:
            - install-dependencies
      - e2e-tests:
          requires:
            - install-dependencies
      - build:
          requires:
            - install-dependencies
      - deploy:
          context: leftovers-deployment
          requires:
            - build
            - e2e-tests
            - unit-tests
            - lint
